generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String?  @unique
  password   String?
  phone      String?  @unique
  github_id  String?  @unique
  avatar     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  SMSToken SMSToken[]
  Product  Product[]
  chat_rooms ChatRoom[]
  messages   Message[]
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

// person ---> User's phone ---> sms (token)
// token ---> SMSToken(search in our db) <--connected--> User(find our db) -> log the user in  

model Product {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  title       String
  price       Float
  description String
  photo       String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  userId      Int
  chat_rooms ChatRoom[]
}

model ChatRoom {
  id         String      @id @default(cuid())
  users      User[]
  product    Product   @relation(fields: [productId], references: [id])
  productId  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  messages   Message[]
}

model Message {
  id         Int      @id @default(autoincrement())
  payload    String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  room       ChatRoom @relation(fields: [chatRoomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  chatRoomId String
  userId     Int
}
